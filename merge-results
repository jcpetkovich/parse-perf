#!/usr/bin/perl -w
# merge-results --- Merge datamill results.
# Author: Jean-Christophe Petkovich <jcpetkovich@gmail.com>
# Created: 29 Apr 2013
# Version: 0.01

use v5.12;
use warnings;
use strict;
use Getopt::Long qw( :config auto_help );
use Archive::Any;
use Text::CSV;
use File::Find::Rule;
use Path::Class;
use Parse::Perf;
use Try::Tiny;
use autodie;

our $cleanup     = '';
our $resultsfile = '';
our $verbose     = '';
our $byprogram   = '';
our $addexpname  = '';
our $prepare     = '';

GetOptions(
    '-c|cleanup'  => \$cleanup,
    '-o|output'   => \$resultsfile,
    '-v|verbose'  => \$verbose,
    'byprogram'   => \$byprogram,
    'add-expname' => \$addexpname,
    'prepare'     => \$prepare,
);

our $directory = '.';

$directory = shift @ARGV if @ARGV > 0;

our $rule = File::Find::Rule->new;

our $index_header = '';

sub prepare_job {
    my ($job_tar_ball) = @_;

    my $job_dir = $job_tar_ball =~ s/\.tar\.gz$//r;
    say STDERR $job_tar_ball;
    try {
        mkdir $job_dir;
    };

    my $archive = Archive::Any->new($job_tar_ball);
    $archive->extract($job_dir);

    my @logs = $rule->new->file()->name("*.txt")->in($job_dir);

    for my $file (@logs) {
        my $output = $file =~ s/\.txt/\.csv/r;
        parse_and_dump $file, $output;
    }

    if ($cleanup) {
        for my $file (@logs) {
            say STDERR "Cleaning up $file" if $verbose;
            try {
                unlink $file;
            };
        }
    }
}

if ($prepare) {
    for my $tarfile ( $rule->new->file()->name("*.tar.gz")->in($directory) ) {
        $tarfile = file( $directory, $tarfile );
        prepare_job($tarfile);
    }
}

my ($index) = $rule->new->file()->name("*_results_index.csv")->in($directory);
my $fh = IO::File->new( $index, "r" );
my $csv = Text::CSV->new( { binary => 1, auto_diag => 1 } );

# Assuming perf metrics come last in the header.
my $header = $csv->getline($fh);
$header = [ grep { not /perf/ } @$header ];

my $oh;
if ($resultsfile) {
    IO::File->new( $resultsfile, "w" );
}
else {
    open( $oh, ">-" );
}

# If we are separating by program, we need an additional space for the program used
$csv->print(
    $oh,
    [
        @$header, ( $byprogram ? "program" : () ),
        ( $addexpname ? "addexpname" : () ), @Parse::Perf::HEADER
    ]
);
print $oh "\n";
while ( my $row = $csv->getline($fh) ) {

    # Splice the row by the length of the header we produced
    splice @$row, scalar @$header;

    my $job_id      = $row->[1];
    my $results_dir = $job_id . "_results";

    my @csvs = $rule->new->file()->name("*.csv")->in($results_dir);

    for my $csv_file (@csvs) {

        # Get the program name
        my $program;
        if ($byprogram) {
            ($program) = $csv_file =~ /perflog-([^-]+)-/;
        }

        # Get the experiment name (what was compared vs what)
        my ( $vsname, $a_name, $b_name );
        if ($addexpname) {
            ($vsname) = $csv_file =~ /_([^_]+_vs_[^_]+)\.csv/;

            # Counter A vs counter B (lowercased)
            ( $a_name, $b_name ) = sort map { lc } split( "_vs_", $vsname );
            $vsname = join( "_vs_", $a_name, $b_name );
            print STDERR "FOUND: $vsname\n";
        }

        say STDERR "NAMES: A: $a_name vs B: $b_name";

        say STDERR "USING: $csv_file";

        # Read in CSV to a hash table to order data as in the experiment name
        my $csvfh          = IO::File->new($csv_file);
        my $results_header = $csv->getline($csvfh);
        my %trial_results;
        while ( my $measurement = $csv->getline($csvfh) ) {
            say STDERR Dumper($measurement);

            my $translated =
              translate_name( [ $a_name, $b_name ], $measurement->[0] );

            say STDERR "TRANSLATION: Original: ", $measurement->[0],
              " Translated: ", $translated;

            $trial_results{ $measurement->[0] } =
              [ @$measurement[ 1 .. $#$measurement ] ];
        }

        say STDERR "DATA: ", Dumper( \%trial_results );

        # If we can't find the row, fill it with empty strings
        my @trial_row =
          map { $trial_results{$_} ? @{ $trial_results{$_} } : ("") x 3; }
          ( $a_name, $b_name );

        say STDERR "ROW: ", join( ", ", @trial_row );

        # If we are using by program, dump the program name as well
        $csv->print(
            $oh,
            [
                @$row,
                ( $byprogram  ? $program : () ),
                ( $addexpname ? $vsname  : () ),
                @trial_row
            ]
        );
        print $oh "\n";

    }
}

__END__

=head1 NAME

merge-results - Describe the usage of script briefly

=head1 SYNOPSIS

merge-results [options] args

      -opt --long      Option description

=head1 DESCRIPTION

Stub documentation for merge-results, 

=head1 AUTHOR

Jean-Christophe Petkovich, E<lt>jcpetkovich@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2013 by Jean-Christophe Petkovich

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.2 or,
at your option, any later version of Perl 5 you may have available.

=head1 BUGS

None reported... yet.

=cut
